# -*- coding: utf-8 -*-
"""Street Signs .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Rm12S80H1GLFKPRYzNDZfNIOzoQaPCnP
"""

!git clone https://bitbucket.org/jadslim/german-traffic-signs.git

import pickle

!ls

!cd german-traffic-signs

!ls

with open('german-traffic-signs/train.p','rb') as f:
  train_data = pickle.load(f)

with open('german-traffic-signs/test.p','rb') as f:  
  test_data = pickle.load(f)

with open('german-traffic-signs/valid.p','rb') as f:
  val_data = pickle.load(f)

print('Done')

type (train_data)

train_data

x_train , y_train = train_data['features'], train_data['labels']
x_test , y_test = test_data['features'] , test_data['labels']
x_val , y_val = val_data['features'] , val_data['labels']

print(x_train.shape)
print(x_test.shape)
print(x_val.shape)

import pandas as pd

data = pd.read_csv('german-traffic-signs/signnames.csv')

print (data)

import matplotlib.pyplot as plt
plt.imshow(x_train[0])
print(x_train[0].shape)
print('The lable of the Pic:',y_train[0])

"""**Image PreProcessing**"""

import cv2

#converting images into gray scale so that the neural network can learn the pattern easily



def gray(img):
  img = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
  return img

#equalizing images to make the features in the images more porminent for the model to understand

def equalize(img):
  img = cv2.equalizeHist(img)
  
  return img

def preprocessing(img):
  img = gray(img)
  img = equalize(img)
  #now normalizing the images
  img = img/255
  return img
  

print('Done')

import numpy as np

x_train = np.array(list(map(preprocessing,x_train)))
x_test = np.array(list(map(preprocessing,x_test)))
x_val = np.array(list(map(preprocessing,x_val)))

"""**Img after preprocessing**"""

plt.imshow(x_train[0])
print(x_train.shape)

from tensorflow.keras.utils import to_categorical

y_train = to_categorical(y_train,43)
y_test = to_categorical(y_test,43)
y_val = to_categorical(y_val,43)

x_train = x_train.reshape(34799,32,32,1)
x_test = x_test.reshape(12630,32,32,1)
x_val = x_val.reshape(4410,32,32,1)

from tensorflow.keras.layers import Conv2D,Flatten,MaxPooling2D,Dense,Dropout

from tensorflow.keras.models import Sequential

model = Sequential()

model = Sequential()
model.add(Conv2D(32,(5,5),input_shape=(32,32,1),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(15,(3,3),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Flatten())
model.add(Dense(500,activation='relu'))
model.add(Dropout(0.4))
model.add(Dense(43,activation='softmax'))

model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

model.summary()

model.fit(x_train,y_train,epochs=20,batch_size=500,verbose=1,shuffle=True)

predictions = model.predict_classes(x_test)

from sklearn.metrics import classification_report

predictions[0]

y_test = np.argmax(y_test,axis=1)

y_test[0]

print(classification_report(y_test,predictions))

"""**To save Model**"""

#model.save('models.h5')